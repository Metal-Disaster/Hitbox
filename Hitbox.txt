local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer

-- Verifica si existe la ruta LocalPlayer > CharacterFolder > [PlayerName] > "chara"
local function ValidatePath()
    local charFolder = workspace:FindFirstChild("LocalPlayer")
    if not charFolder then return false end
    
    local characterFolder = charFolder:FindFirstChild("CharacterFolder")
    if not characterFolder then return false end
    
    local characterName = characterFolder:FindFirstChild(player.Name)
    if not characterName then return false end
    
    return characterName:FindFirstChild("chara") ~= nil
end

-- Guarda los tamaños originales de los hitboxes
local originalSizes = {}
local active = false
local heartbeatConnection = nil

-- Modifica o restaura los hitboxes
local function ModifyHitboxes(enable)
    if not ValidatePath() then return false end
    
    local hitboxModule = workspace:WaitForChild("gameInstance"):WaitForChild("hitBoxModule")
    local playersFolder = hitboxModule:WaitForChild("Players")

    for _, playerInFolder in ipairs(playersFolder:GetChildren()) do
        local hitFolder = playerInFolder:FindFirstChild("HitFolder")
        if hitFolder then
            local collision = hitFolder:FindFirstChild("collision")
            if collision then
                if enable then
                    -- Guarda el tamaño original si no está guardado
                    if not originalSizes[playerInFolder.Name] then
                        originalSizes[playerInFolder.Name] = collision.Size
                    end
                    -- Aplica el nuevo tamaño
                    collision.Size = Vector3.new(10, 15, 10)
                else
                    -- Restaura el tamaño original si existe
                    if originalSizes[playerInFolder.Name] then
                        collision.Size = originalSizes[playerInFolder.Name]
                    end
                end
            end
        end
    end
    return true
end

-- Loop para mantener los cambios activos
local function MainLoop()
    if active then
        ModifyHitboxes(true)
    end
end

-- Función para activar/desactivar el sistema
local function SetActive(state)
    active = state
    
    if active then
        -- Activa el loop continuo
        heartbeatConnection = RunService.Heartbeat:Connect(MainLoop)
        ModifyHitboxes(true)
    else
        -- Desactiva y restaura los valores originales
        if heartbeatConnection then
            heartbeatConnection:Disconnect()
            heartbeatConnection = nil
        end
        ModifyHitboxes(false)
    end
end

return SetActive